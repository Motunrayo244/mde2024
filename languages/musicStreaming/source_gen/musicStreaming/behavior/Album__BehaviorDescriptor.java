package musicStreaming.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public final class Album__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9e6L, "musicStreaming.structure.Album");

  public static final SMethod<Integer> calculateDuration_id1kS_44Q8G_J = new SMethodBuilder<Integer>(new SJavaCompoundTypeImpl(Integer.TYPE)).name("calculateDuration").modifiers(0, AccessPrivileges.PUBLIC).concept(CONCEPT).baseMethodId(1529135081294317935L).languageId(0x98a46148912f43e1L, 0x79d092ed8c7a4027L).build2();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(calculateDuration_id1kS_44Q8G_J);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SPropertyOperations.assign(__thisNode__, PROPS.duration$j0ZR, ((int) Album__BehaviorDescriptor.calculateDuration_id1kS_44Q8G_J.invoke(__thisNode__)));
  }

  /*package*/ static int calculateDuration_id1kS_44Q8G_J(@NotNull SNode __thisNode__) {
    return ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.tracks$j1eS)).foldLeft(0, (acc, track) -> acc + SPropertyOperations.getInteger(track, PROPS.duration$b_Sg));
  }

  /*package*/ Album__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Integer) calculateDuration_id1kS_44Q8G_J(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class PROPS {
    /*package*/ static final SProperty duration$j0ZR = MetaAdapterFactory.getProperty(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9e6L, 0x74e6b04ad8bac9e8L, "duration");
    /*package*/ static final SProperty duration$b_Sg = MetaAdapterFactory.getProperty(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac0a2L, 0x74e6b04ad8bac9e5L, "duration");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink tracks$j1eS = MetaAdapterFactory.getContainmentLink(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9e6L, 0x74e6b04ad8bac9e9L, "tracks");
  }
}
