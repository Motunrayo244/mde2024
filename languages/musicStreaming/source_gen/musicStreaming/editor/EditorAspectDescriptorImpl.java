package musicStreaming.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Album_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AlbumTrack_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Artist_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Composer_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Playlist_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Podcast_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new PodcastEpisodes_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new SingleTrack_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new StreamingPlatform_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Track_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new User_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new PodcastEpisodes_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9e6L), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8deL), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b7L), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b9L), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9c2L), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b4L), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b6L), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8e0L), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8d6L), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac0a2L), MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8d9L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b6L)).seal();
}
