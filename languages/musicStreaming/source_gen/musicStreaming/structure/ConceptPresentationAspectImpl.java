package musicStreaming.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Album;
  private ConceptPresentation props_AlbumTrack;
  private ConceptPresentation props_Artist;
  private ConceptPresentation props_Composer;
  private ConceptPresentation props_FollowedArtist;
  private ConceptPresentation props_Follower;
  private ConceptPresentation props_MusicTrack;
  private ConceptPresentation props_Playlist;
  private ConceptPresentation props_PlaylistTrack;
  private ConceptPresentation props_Podcast;
  private ConceptPresentation props_PodcastEpisodes;
  private ConceptPresentation props_SingleTrack;
  private ConceptPresentation props_StreamingPlatform;
  private ConceptPresentation props_Track;
  private ConceptPresentation props_User;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Album:
        if (props_Album == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Album = cpb.create();
        }
        return props_Album;
      case LanguageConceptSwitch.AlbumTrack:
        if (props_AlbumTrack == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AlbumTrack = cpb.create();
        }
        return props_AlbumTrack;
      case LanguageConceptSwitch.Artist:
        if (props_Artist == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Artist = cpb.create();
        }
        return props_Artist;
      case LanguageConceptSwitch.Composer:
        if (props_Composer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Composer = cpb.create();
        }
        return props_Composer;
      case LanguageConceptSwitch.FollowedArtist:
        if (props_FollowedArtist == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FollowedArtist");
          props_FollowedArtist = cpb.create();
        }
        return props_FollowedArtist;
      case LanguageConceptSwitch.Follower:
        if (props_Follower == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Follower");
          props_Follower = cpb.create();
        }
        return props_Follower;
      case LanguageConceptSwitch.MusicTrack:
        if (props_MusicTrack == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MusicTrack = cpb.create();
        }
        return props_MusicTrack;
      case LanguageConceptSwitch.Playlist:
        if (props_Playlist == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Playlist = cpb.create();
        }
        return props_Playlist;
      case LanguageConceptSwitch.PlaylistTrack:
        if (props_PlaylistTrack == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PlaylistTrack");
          props_PlaylistTrack = cpb.create();
        }
        return props_PlaylistTrack;
      case LanguageConceptSwitch.Podcast:
        if (props_Podcast == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Podcast = cpb.create();
        }
        return props_Podcast;
      case LanguageConceptSwitch.PodcastEpisodes:
        if (props_PodcastEpisodes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PodcastEpisodes = cpb.create();
        }
        return props_PodcastEpisodes;
      case LanguageConceptSwitch.SingleTrack:
        if (props_SingleTrack == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SingleTrack = cpb.create();
        }
        return props_SingleTrack;
      case LanguageConceptSwitch.StreamingPlatform:
        if (props_StreamingPlatform == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_StreamingPlatform = cpb.create();
        }
        return props_StreamingPlatform;
      case LanguageConceptSwitch.Track:
        if (props_Track == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Track = cpb.create();
        }
        return props_Track;
      case LanguageConceptSwitch.User:
        if (props_User == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_User = cpb.create();
        }
        return props_User;
    }
    return null;
  }
}
