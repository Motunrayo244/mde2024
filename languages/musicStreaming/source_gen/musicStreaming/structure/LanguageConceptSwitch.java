package musicStreaming.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Album = 0;
  public static final int AlbumTrack = 1;
  public static final int Artist = 2;
  public static final int Composer = 3;
  public static final int FollowedArtist = 4;
  public static final int Follower = 5;
  public static final int MusicTrack = 6;
  public static final int Playlist = 7;
  public static final int PlaylistTrack = 8;
  public static final int Podcast = 9;
  public static final int PodcastEpisodes = 10;
  public static final int SingleTrack = 11;
  public static final int StreamingPlatform = 12;
  public static final int Track = 13;
  public static final int User = 14;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x79d092ed8c7a4027L, 0x98a46148912f43e1L);
    builder.put(0x74e6b04ad8bac9e6L, Album);
    builder.put(0x74e6b04ad8bab8deL, AlbumTrack);
    builder.put(0x74e6b04ad8bac9b7L, Artist);
    builder.put(0x74e6b04ad8bac9b9L, Composer);
    builder.put(0x74e6b04ad8cb46c9L, FollowedArtist);
    builder.put(0x7bd95b537aac0c1bL, Follower);
    builder.put(0x74e6b04ad8bac9f0L, MusicTrack);
    builder.put(0x74e6b04ad8bac9c2L, Playlist);
    builder.put(0x74e6b04ad8cb51eaL, PlaylistTrack);
    builder.put(0x74e6b04ad8bac9b4L, Podcast);
    builder.put(0x74e6b04ad8bac9b6L, PodcastEpisodes);
    builder.put(0x74e6b04ad8bab8e0L, SingleTrack);
    builder.put(0x74e6b04ad8bab8d6L, StreamingPlatform);
    builder.put(0x74e6b04ad8bac0a2L, Track);
    builder.put(0x74e6b04ad8bab8d9L, User);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
