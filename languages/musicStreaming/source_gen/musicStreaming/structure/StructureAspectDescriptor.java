package musicStreaming.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptorImpl;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAlbum = createDescriptorForAlbum();
  /*package*/ final ConceptDescriptor myConceptAlbumTrack = createDescriptorForAlbumTrack();
  /*package*/ final ConceptDescriptor myConceptArtist = createDescriptorForArtist();
  /*package*/ final ConceptDescriptor myConceptComposer = createDescriptorForComposer();
  /*package*/ final ConceptDescriptor myConceptFollowedArtist = createDescriptorForFollowedArtist();
  /*package*/ final ConceptDescriptor myConceptFollower = createDescriptorForFollower();
  /*package*/ final ConceptDescriptor myConceptMusicTrack = createDescriptorForMusicTrack();
  /*package*/ final ConceptDescriptor myConceptPlaylist = createDescriptorForPlaylist();
  /*package*/ final ConceptDescriptor myConceptPlaylistTrack = createDescriptorForPlaylistTrack();
  /*package*/ final ConceptDescriptor myConceptPodcast = createDescriptorForPodcast();
  /*package*/ final ConceptDescriptor myConceptPodcastEpisodes = createDescriptorForPodcastEpisodes();
  /*package*/ final ConceptDescriptor myConceptSingleTrack = createDescriptorForSingleTrack();
  /*package*/ final ConceptDescriptor myConceptStreamingPlatform = createDescriptorForStreamingPlatform();
  /*package*/ final ConceptDescriptor myConceptTrack = createDescriptorForTrack();
  /*package*/ final ConceptDescriptor myConceptUser = createDescriptorForUser();
  /*package*/ final EnumerationDescriptor myEnumerationMusicGenre = new EnumerationDescriptor_MusicGenre();
  /*package*/ final EnumerationDescriptor myEnumerationOrder = new EnumerationDescriptor_Order();
  /*package*/ final EnumerationDescriptor myEnumerationpodcastType = new EnumerationDescriptor_podcastType();
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatypeDate = new ConstrainedStringDatatypeDescriptorImpl(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9edL, "Date", "r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8924264550709857312", "\\d{4}-\\d{2}-\\d{2}");
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatypeEmail = new ConstrainedStringDatatypeDescriptorImpl(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9eeL, "Email", "r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553279982", "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$");
  /*package*/ final ConstrainedStringDatatypeDescriptor myCSDatatype_FloatNumberValue = new ConstrainedStringDatatypeDescriptorImpl(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9edL, "_FloatNumberValue", "r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553279981", "^([+-]?\\d*\\.?\\d*)$");
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAlbum, myConceptAlbumTrack, myConceptArtist, myConceptComposer, myConceptFollowedArtist, myConceptFollower, myConceptMusicTrack, myConceptPlaylist, myConceptPlaylistTrack, myConceptPodcast, myConceptPodcastEpisodes, myConceptSingleTrack, myConceptStreamingPlatform, myConceptTrack, myConceptUser);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Album:
        return myConceptAlbum;
      case LanguageConceptSwitch.AlbumTrack:
        return myConceptAlbumTrack;
      case LanguageConceptSwitch.Artist:
        return myConceptArtist;
      case LanguageConceptSwitch.Composer:
        return myConceptComposer;
      case LanguageConceptSwitch.FollowedArtist:
        return myConceptFollowedArtist;
      case LanguageConceptSwitch.Follower:
        return myConceptFollower;
      case LanguageConceptSwitch.MusicTrack:
        return myConceptMusicTrack;
      case LanguageConceptSwitch.Playlist:
        return myConceptPlaylist;
      case LanguageConceptSwitch.PlaylistTrack:
        return myConceptPlaylistTrack;
      case LanguageConceptSwitch.Podcast:
        return myConceptPodcast;
      case LanguageConceptSwitch.PodcastEpisodes:
        return myConceptPodcastEpisodes;
      case LanguageConceptSwitch.SingleTrack:
        return myConceptSingleTrack;
      case LanguageConceptSwitch.StreamingPlatform:
        return myConceptStreamingPlatform;
      case LanguageConceptSwitch.Track:
        return myConceptTrack;
      case LanguageConceptSwitch.User:
        return myConceptUser;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationMusicGenre, myEnumerationOrder, myEnumerationpodcastType, myCSDatatypeDate, myCSDatatypeEmail, myCSDatatype_FloatNumberValue);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAlbum() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "Album", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9e6L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553279974");
    b.version(3);
    b.property("duration", 0x74e6b04ad8bac9e8L).type(PrimitiveTypeId.INTEGER).origin("8423613988553279976").done();
    b.property("img_url", 0x7bd95b537aac0c26L).type(PrimitiveTypeId.STRING).origin("8924264550709857318").done();
    b.aggregate("tracks", 0x74e6b04ad8bac9e9L).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8deL).optional(true).ordered(true).multiple(true).origin("8423613988553279977").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAlbumTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "AlbumTrack", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8deL);
    b.class_(false, false, false);
    // extends: musicStreaming.structure.MusicTrack
    b.super_(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9f0L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553275614");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForArtist() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "Artist", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b7L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553279927");
    b.version(3);
    b.property("about", 0x74e6b04ad8bac9fcL).type(PrimitiveTypeId.STRING).origin("8423613988553279996").done();
    b.property("listeners", 0x74e6b04ad8bac9fdL).type(PrimitiveTypeId.INTEGER).origin("8423613988553279997").done();
    b.property("img_url", 0x7bd95b537aac0c25L).type(PrimitiveTypeId.STRING).origin("8924264550709857317").done();
    b.aggregate("albums", 0x74e6b04ad8bac9ffL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9e6L).optional(true).ordered(true).multiple(true).origin("8423613988553279999").done();
    b.aggregate("solo_tracks", 0x74e6b04ad8baca00L).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8e0L).optional(true).ordered(true).multiple(true).origin("8423613988553280000").done();
    b.aggregate("Followers", 0x7bd95b537aac0c1dL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x7bd95b537aac0c1bL).optional(true).ordered(true).multiple(true).origin("8924264550709857309").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForComposer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "Composer", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b9L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553279929");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFollowedArtist() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "FollowedArtist", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8cb46c9L);
    b.class_(false, false, false);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988554360521");
    b.version(3);
    b.associate("artist", 0x74e6b04ad8cb46caL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b7L).optional(true).origin("8423613988554360522").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFollower() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "Follower", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x7bd95b537aac0c1bL);
    b.class_(false, false, false);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8924264550709857307");
    b.version(3);
    b.associate("user", 0x7bd95b537aac0c1cL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8d9L).optional(true).origin("8924264550709857308").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMusicTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "MusicTrack", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9f0L);
    b.class_(false, true, false);
    // extends: musicStreaming.structure.Track
    b.super_(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac0a2L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553279984");
    b.version(3);
    b.property("genre", 0x74e6b04ad8bac9f3L).type(MetaIdFactory.dataTypeId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac99eL)).origin("8423613988553279987").done();
    b.associate("composer", 0x74e6b04ad8bac9f5L).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b9L).optional(true).origin("8423613988553279989").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlaylist() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "Playlist", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9c2L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553279938");
    b.version(3);
    b.property("num_o_tracks", 0x74e6b04ad8bac9cfL).type(PrimitiveTypeId.INTEGER).origin("8423613988553279951").done();
    b.property("duration", 0x74e6b04ad8bac9d0L).type(MetaIdFactory.dataTypeId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9edL)).origin("8423613988553279952").done();
    b.property("order_by", 0x74e6b04ad8bac9d1L).type(MetaIdFactory.dataTypeId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9d2L)).origin("8423613988553279953").done();
    b.associate("owner", 0x74e6b04ad8bac9d9L).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8d9L).optional(false).origin("8423613988553279961").done();
    b.associate("tracks", 0x7bd95b537aac0c24L).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8cb51eaL).optional(true).origin("8924264550709857316").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlaylistTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "PlaylistTrack", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8cb51eaL);
    b.class_(false, false, false);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988554363370");
    b.version(3);
    b.property("position", 0x74e6b04ad8cb51ecL).type(PrimitiveTypeId.INTEGER).origin("8423613988554363372").done();
    b.property("added_date", 0x7bd95b537aac0c1eL).type(MetaIdFactory.dataTypeId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9edL)).origin("8924264550709857310").done();
    b.associate("track", 0x74e6b04ad8cb51ebL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac0a2L).optional(true).origin("8423613988554363371").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPodcast() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "Podcast", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b4L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553279924");
    b.version(3);
    b.property("description", 0x74e6b04ad8bac9bcL).type(PrimitiveTypeId.STRING).origin("8423613988553279932").done();
    b.property("types", 0x74e6b04ad8bac9dbL).type(MetaIdFactory.dataTypeId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9c5L)).origin("8423613988553279963").done();
    b.property("rating", 0x74e6b04ad8bac9dcL).type(PrimitiveTypeId.INTEGER).origin("8423613988553279964").done();
    b.property("img_url", 0x7bd95b537aac0c27L).type(PrimitiveTypeId.STRING).origin("8924264550709857319").done();
    b.aggregate("episodes", 0x74e6b04ad8bac9deL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b6L).optional(true).ordered(true).multiple(true).origin("8423613988553279966").done();
    b.aggregate("follower", 0x74e6b04ad8bac9e0L).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x7bd95b537aac0c1bL).optional(true).ordered(true).multiple(true).origin("8423613988553279968").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPodcastEpisodes() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "PodcastEpisodes", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b6L);
    b.class_(false, false, false);
    // extends: musicStreaming.structure.Track
    b.super_(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac0a2L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553279926");
    b.version(3);
    b.property("date", 0x74e6b04ad8bac9e1L).type(MetaIdFactory.dataTypeId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9edL)).origin("8423613988553279969").done();
    b.property("description", 0x74e6b04ad8bac9e2L).type(PrimitiveTypeId.STRING).origin("8423613988553279970").done();
    b.property("transcript", 0x74e6b04ad8bac9e3L).type(PrimitiveTypeId.STRING).origin("8423613988553279971").done();
    b.associate("podcast", 0x74e6b04ad8bac9ecL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b4L).optional(false).origin("8423613988553279980").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSingleTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "SingleTrack", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8e0L);
    b.class_(false, false, false);
    // extends: musicStreaming.structure.MusicTrack
    b.super_(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9f0L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553275616");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStreamingPlatform() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "StreamingPlatform", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8d6L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553275606");
    b.version(3);
    b.property("description", 0x74e6b04ad8bac9aaL).type(PrimitiveTypeId.STRING).origin("8423613988553279914").done();
    b.aggregate("users", 0x74e6b04ad8bac9adL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8d9L).optional(true).ordered(true).multiple(true).origin("8423613988553279917").done();
    b.aggregate("artists", 0x74e6b04ad8bac9afL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b7L).optional(true).ordered(true).multiple(true).origin("8423613988553279919").done();
    b.aggregate("podcasts", 0x74e6b04ad8bac9bbL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9b4L).optional(true).ordered(true).multiple(true).origin("8423613988553279931").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTrack() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "Track", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac0a2L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553277602");
    b.version(3);
    b.property("duration", 0x74e6b04ad8bac9e5L).type(PrimitiveTypeId.INTEGER).origin("8423613988553279973").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUser() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("musicStreaming", "User", 0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bab8d9L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:3a7149cd-01af-4c52-9ee9-1b272990cfb7(musicStreaming.structure)/8423613988553275609");
    b.version(3);
    b.property("username", 0x74e6b04ad8bac9bfL).type(PrimitiveTypeId.STRING).origin("8423613988553279935").done();
    b.property("email", 0x74e6b04ad8bac9c0L).type(MetaIdFactory.dataTypeId(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9eeL)).origin("8423613988553279936").done();
    b.property("password", 0x74e6b04ad8bac9c1L).type(PrimitiveTypeId.STRING).origin("8423613988553279937").done();
    b.aggregate("follows", 0x74e6b04ad8cb46cbL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8cb46c9L).optional(true).ordered(true).multiple(true).origin("8423613988554360523").done();
    b.aggregate("playlists", 0x74e6b04ad8cb51edL).target(0x79d092ed8c7a4027L, 0x98a46148912f43e1L, 0x74e6b04ad8bac9c2L).optional(true).ordered(true).multiple(true).origin("8423613988554363373").done();
    return b.create();
  }
}
